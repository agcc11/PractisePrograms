<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="0" hostname="Kunal" failures="0" tests="2" name="anno" time="3.447" errors="0" timestamp="2022-04-22T16:12:08 IST">
  <testcase classname="testNG_02pack.parameter_concept" name="@BeforeTest beforetest" time="3.275">
    <failure type="java.lang.IllegalStateException" message="The driver executable must exist: G:\eclipse\Functiondemo\‪‪G:\selenium\chromedriver.exe">
      <![CDATA[java.lang.IllegalStateException: The driver executable must exist: G:\eclipse\Functiondemo\‪‪G:\selenium\chromedriver.exe
at org.openqa.selenium.internal.Require$FileStateChecker.isFile(Require.java:342)
at org.openqa.selenium.remote.service.DriverService.checkExecutable(DriverService.java:147)
at org.openqa.selenium.remote.service.DriverService.findExecutable(DriverService.java:142)
at org.openqa.selenium.chrome.ChromeDriverService.access$000(ChromeDriverService.java:38)
at org.openqa.selenium.chrome.ChromeDriverService$Builder.findDefaultExecutable(ChromeDriverService.java:231)
at org.openqa.selenium.remote.service.DriverService$Builder.build(DriverService.java:437)
at org.openqa.selenium.chrome.ChromeDriverService.createDefaultService(ChromeDriverService.java:127)
at org.openqa.selenium.chrome.ChromeDriver.<init>(ChromeDriver.java:48)
at testNG_02pack.parameter_concept.beforetest(parameter_concept.java:25)
... Removed 24 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeTest beforetest -->
  <testcase classname="testNG_02pack.parameter_concept" name="@BeforeClass beforeclass" time="-1.650624128666E9">
    <skipped/>
  </testcase> <!-- @BeforeClass beforeclass -->
  <testcase classname="testNG_02pack.parameter_concept" name="@BeforeMethod beforemethod" time="-1.650624128689E9">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase classname="testNG_02pack.parameter_concept" name="@AfterMethod aftermethod" time="-1.650624128709E9">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase classname="testNG_02pack.parameter_concept" name="@BeforeMethod beforemethod" time="-1.650624128714E9">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase classname="testNG_02pack.parameter_concept" name="@AfterMethod aftermethod" time="-1.650624128728E9">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase classname="testNG_02pack.parameter_concept" name="@AfterClass afterclass" time="-1.650624128732E9">
    <skipped/>
  </testcase> <!-- @AfterClass afterclass -->
  <testcase classname="testNG_02pack.parameter_concept" name="@AfterTest aftertest" time="-1.650624128753E9">
    <skipped/>
  </testcase> <!-- @AfterTest aftertest -->
  <testcase classname="testNG_02pack.parameter_concept" name="test1" time="0.0">
    <skipped/>
  </testcase> <!-- test1 -->
  <testcase classname="testNG_02pack.parameter_concept" name="test2" time="0.0">
    <skipped/>
  </testcase> <!-- test2 -->
</testsuite> <!-- anno -->
